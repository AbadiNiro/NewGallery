@{
    Layout = "~/Views/Shared/_LayoutUserMode.cshtml";

    ViewBag.Title = "Covid";
}

<link href="@Url.Content("~/Content/covid.css")" rel="stylesheet" type="text/css" />


<header>
    <canvas id="canvas" style="border:2px solid black; background-color:black; width:100%">
        sorry,your browser does not support canvas tag.
    </canvas>
    <script src="~/Scripts/canvas.js"></script>
</header>





<div class="row">

    <table style="width:100%">
        <tr>
            <th>

                <div class="column left">
                    <div class="image-container">
                        <img src="~/images/PHOTO1.jpg" alt="" />
                        <img class="transition-image" src="~/images/PHOTO11.jpg" alt="" />
                    </div>

                </div>

            </th>
            <th colspan="2">

                <div class="column right">

                    <div class=" container">
                        <p>Our top priority is the health and safety of our employees and customers, so we completely redesigned our production and fulfillment center to comply with state recommended social distancing and PPE guidelines.</p>
                        <p><strong>What does this mean for you?</strong></p>
                        <ul>
                            <li><strong> Processing times may be delayed.</strong> Generally processing times are within 3-5 business days</li>
                            although currently those times vary due to the issues relating to COVID-19 and government orders and the impact to our business.
                            Processing times may also be extended during holidays, launches/re-stocks, limited edition releases and promotions.
                            <li> We will notify you as soon as your order ships or if we foresee any issues with fulfilling your order.</li>
                            <li>You can cancel for a full refund. We have updated our return policy so you can cancel any unshipped order at any time for a full refund.</li>
                        </ul>
                        <p>We appreciate your patience and understanding as we work through this together.</p>
                        <p>Thank you so much for your support!</p>
                        <p>Love,<br>M.A.N.S GALLERY</br></p>
                        <!--<br />
    <br />
    <br />
    <br />
    <br />
    <h2>This chart shows how many paintings were made by the 50 most influential artists in the world</h2>
    <h3>Taken from a csv file on the kaggel website</h3>-->


                    </div>

                </div>

            </th>
        </tr>

    </table>


    <style>
        .node circle {
            stroke: #3a403d;
            stroke-width: .5px;
        }

        .node:hover {
            stroke-width: 7px !important;
            opacity: 1 !important;
        }
    </style>
    
    <div id="mouse-erea"></div>

    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script>
        var width = window.innerWidth, height = window.innerHeight, sizeDivisor = 100, nodePadding = 2.5;

        var svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        var color = d3.scaleOrdinal(["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"]);

        var simulation = d3.forceSimulation()
            .force("forceX", d3.forceX().strength(.1).x(width * .5))
            .force("forceY", d3.forceY().strength(.1).y(height * .5))
            .force("center", d3.forceCenter().x(width * .5).y(height * .5))
            .force("charge", d3.forceManyBody().strength(-15));

        d3.csv("https://raw.githubusercontent.com/AsafWeitzman/NewGallery/master/BestArtworksofAllTimeB.csv", types, function (error, graph) {
            if (error) throw error;

            // sort the nodes so that the bigger ones are at the back
            graph = graph.sort(function (a, b) { return b.size - a.size; });

            //update the simulation based on the data
            simulation
                .nodes(graph)
                .force("collide", d3.forceCollide().strength(.5).radius(function (d) { return d.radius + nodePadding; }).iterations(1))
                .on("tick", function (d) {
                    node
                        .attr("cx", function (d) { return d.x; })
                        .attr("cy", function (d) { return d.y; })
                });

            var node = svg.append("g")
                .attr("class", "node")
                .selectAll("circle")
                .data(graph)
                .enter().append("circle")
                .attr("r", function (d) { return d.radius; })
                .attr("fill", function (d) { return color(d.name); })
                .attr("cx", function (d) { return d.x; })
                .attr("cy", function (d) { return d.y; })
                //
                .on("mouseover", mouseover) // What to do when hovered
                .on("mousemove", mousemove)
                .on("mouseleave", mouseleave)
                //
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

        });

        function dragstarted(d) {
            if (!d3.event.active) simulation.alphaTarget(.03).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(d) {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
        }

        function dragended(d) {
            if (!d3.event.active) simulation.alphaTarget(.03);
            d.fx = null;
            d.fy = null;
        }

        function types(d) {
            d.paintings = +d.paintings;
            d.size = +d.paintings / sizeDivisor;
            d.size < 3 ? d.radius = 3 : d.radius = d.size;
            return d;
        }

        //

        // create a tooltip
        var Tooltip = d3.select("body")
            .append("div")
            .style("opacity", 0)
            .attr("class", "tooltip")
            .style("background-color", "white")
            .style("border", "solid")
            .style("border-width", "2px")
            .style("border-radius", "5px")
            .style("padding", "5px")

        // Three function that change the tooltip when user hover / move / leave a cell
        var mouseover = function (d) {
            Tooltip
                .style("opacity", 1)

        }
        var mousemove = function (d) {
            Tooltip
                .html('<u>' + d.name + '</u>' + "<br>" + d.paintings / 10 + " paintings")
                .style("top", (event.pageY) + "px")
                .style("left", (event.pageX + 100) + "px")

        }
        var mouseleave = function (d) {
            Tooltip
                .style("opacity", 0)
        }


    </script>





    <!--sta-->


</div>